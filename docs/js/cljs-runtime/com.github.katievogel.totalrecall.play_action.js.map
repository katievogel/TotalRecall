{"version":3,"sources":["com/github/katievogel/totalrecall/play_action.cljs"],"mappings":";AAWA,AAAA,AAAMA,AAAgBC;AAAtB,AACE,AAAMC,AAAgB,AAAA,AAAA,AAAA,AAACC,AAAOF;AACxBG,AAAiB,AAAA,AAAA,AAAA,AAACD,AAAOF;AAD/B,AAEE,AACE,AAACI,AAAEH,AAAgBE;AAAkB,AAAA,AAAA,AAACE,AAAUL,AAAYM;;AAD9D,AAEQ,AAAA,AAAA,AAACD,AAAUL,AAAcM;;;;AAErC,AAAA,AAACC,AAEC,AAAAC,AAAKR;AAAL,AAAA,AAAAS,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASE;AAAT,AAAAD,AAAAD,AAAA,AAAA,AAAWG;AAAX,AACE,AAAMC,AAAQ,AAAA,AAAUb;AAAxB,AACE,AACE,AAAA,AAAIa;AAAWb;;AADjB,AAEE,AAAA,AAACI,AAAE,AAAA,AAAaJ;AAAS,AAAA,AAACc,AAAMd,AAAeY;;AAFjD,AAGE,AAAA,AAACR,AAAE,AAAA,AAAcJ;AAAaA,AACA,AAAA,AAACc,AAAmBF,AACpB,AAACb;;AALjC,AAMQC;;;;;;AAEd,AAAA,AAACO,AAEC,AAAKP;AAAL,AACMA,AACA,AAAA,AAAA,AAACc,AACD,AAAA,AAAA,AAACA;;AAET,AAAA,AAACC,AAEC,AAAAC,AAAKhB;AAAL,AAAA,AAAAiB,AAAAD;AAAA,AAAAN,AAAAO,AAAA,AAAA,AAASN;AAAT,AACE,AAAA,AAAQX;;AAEZ,AAAA,AAACe,AAEC,AAAAG,AAAKlB;AAAL,AAAA,AAAAmB,AAAAD;AAAA,AAAAR,AAAAS,AAAA,AAAA,AAASR;AAAT,AACE,AAAA,AAAUX;;AAId,AAAA,AAACe,AAEC,AAAAK,AAAKpB;AAAL,AAAA,AAAAqB,AAAAD;AAAA,AAAAV,AAAAW,AAAA,AAAA,AAASV;AAAT,AACEX","names":["com.github.katievogel.totalrecall.play-action/pick-tile-eval","db","first-pick-pair","cljs.core.get_in","second-pick-pair","cljs.core._EQ_","cljs.core.update_in","cljs.core/inc","re_frame.core.reg_event_db","p__43344","vec__43345","cljs.core.nth","_","record","strikes","cljs.core.assoc","re_frame.core.reg_sub","p__43348","vec__43349","p__43352","vec__43353","p__43356","vec__43357"],"sourcesContent":["(ns com.github.katievogel.totalrecall.play-action\n  (:require [com.github.katievogel.totalrecall.state :refer [initial-state]]\n            [re-frame.core :as rf]))\n\n\n;player clicks tile\n;tile flips\n;player clicks another tile\n;tile flips\n;if matches, tiles stay flipped\n;if wrong, flip back over\n(defn pick-tile-eval [db]\n  (let [first-pick-pair (get-in db [:first-pick :pair])\n        second-pick-pair (get-in db [:second-pick :pair])]\n    (cond\n      (= first-pick-pair second-pick-pair) (update-in db [:score] inc)\n      :else (update-in db [:strikes] inc))))\n\n(rf/reg-event-db\n  :pick-tile\n  (fn [db [_ record]]\n    (let [strikes (:strikes db)]\n      (cond\n        (>= strikes 3) db\n        (= (:first-pick db) nil) (assoc db :first-pick record)\n        (= (:second-pick db) nil) (-> db\n                                      (assoc :second-pick record)\n                                      (pick-tile-eval))\n        :else db))))\n\n(rf/reg-event-db\n  :temp-clear\n  (fn [db]\n    (-> db\n        (assoc :first-pick nil)\n        (assoc :second-pick nil))))\n\n(rf/reg-sub\n  :show-score\n  (fn [db [_]]\n    (:score db)))\n\n(rf/reg-sub\n  :show-strikes\n  (fn [db [_]]\n    (:strikes db)))\n\n\n;----just for seeing state on page----\n(rf/reg-sub\n  :get-db\n  (fn [db [_]]\n    db))"]}